{"ast":null,"code":"import { newListenerEffect as newListenerEffect$1 } from './newListenerEffect.js';\n\nconst getMappedActions = (store, React, mapActions) => React.useMemo(() => mapActions ? mapActions(store.actions) : store.actions, [mapActions, store.actions]);\n\nfunction customHook(store, React, mapState, mapActions) {\n  const state = mapState ? mapState(store.state) : store.state;\n  const actions = getMappedActions(store, React, mapActions);\n  const originalHook = React.useState(Object.create(null))[1];\n  React.useEffect(newListenerEffect$1(store, mapState, originalHook), []); // eslint-disable-line\n\n  return [state, actions];\n}\n\nexport { customHook };","map":{"version":3,"sources":["E:/DanfeOnlineStore/client/node_modules/use-global-hook/esm/core/customHook.js"],"names":["newListenerEffect","newListenerEffect$1","getMappedActions","store","React","mapActions","useMemo","actions","customHook","mapState","state","originalHook","useState","Object","create","useEffect"],"mappings":"AAAA,SAASA,iBAAiB,IAAIC,mBAA9B,QAAyD,wBAAzD;;AAEA,MAAMC,gBAAgB,GAAG,CAACC,KAAD,EAAQC,KAAR,EAAeC,UAAf,KAA8BD,KAAK,CAACE,OAAN,CAAc,MAAMD,UAAU,GAAGA,UAAU,CAACF,KAAK,CAACI,OAAP,CAAb,GAA+BJ,KAAK,CAACI,OAAnE,EAA4E,CAACF,UAAD,EAAaF,KAAK,CAACI,OAAnB,CAA5E,CAAvD;;AAEA,SAASC,UAAT,CAAoBL,KAApB,EAA2BC,KAA3B,EAAkCK,QAAlC,EAA4CJ,UAA5C,EAAwD;AACtD,QAAMK,KAAK,GAAGD,QAAQ,GAAGA,QAAQ,CAACN,KAAK,CAACO,KAAP,CAAX,GAA2BP,KAAK,CAACO,KAAvD;AACA,QAAMH,OAAO,GAAGL,gBAAgB,CAACC,KAAD,EAAQC,KAAR,EAAeC,UAAf,CAAhC;AACA,QAAMM,YAAY,GAAGP,KAAK,CAACQ,QAAN,CAAeC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAf,EAAoC,CAApC,CAArB;AACAV,EAAAA,KAAK,CAACW,SAAN,CAAgBd,mBAAmB,CAACE,KAAD,EAAQM,QAAR,EAAkBE,YAAlB,CAAnC,EAAoE,EAApE,EAJsD,CAImB;;AAEzE,SAAO,CAACD,KAAD,EAAQH,OAAR,CAAP;AACD;;AAED,SAASC,UAAT","sourcesContent":["import { newListenerEffect as newListenerEffect$1 } from './newListenerEffect.js';\n\nconst getMappedActions = (store, React, mapActions) => React.useMemo(() => mapActions ? mapActions(store.actions) : store.actions, [mapActions, store.actions]);\n\nfunction customHook(store, React, mapState, mapActions) {\n  const state = mapState ? mapState(store.state) : store.state;\n  const actions = getMappedActions(store, React, mapActions);\n  const originalHook = React.useState(Object.create(null))[1];\n  React.useEffect(newListenerEffect$1(store, mapState, originalHook), []); // eslint-disable-line\n\n  return [state, actions];\n}\n\nexport { customHook };\n"]},"metadata":{},"sourceType":"module"}